<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section PUBLIC "-//Boost//DTD BoostBook XML V1.1//EN"
"http://www.boost.org/tools/boostbook/dtd/boostbook.dtd">
<section id="safe_numerics.eliminate_runtime_penalty">
  <title>Eliminating Runtime Penalty</title>

  <para>Up until now, we've focused on detecting when incorrect results are
  produced and handling these occurrences either by throwing an exception or
  invoking some designated function. We've achieved our goal of detecting and
  handling arithmetically incorrect behavior - but at what cost? It is a fact
  that many C++ programmers will find this trade-off unacceptable. So the
  question arises as to how we might minimize or eliminate this runtime
  penalty.</para>

  <para>The first step is to determine what parts of a program might invoke
  exceptions. The following program is similar to previous examples but uses a
  special exception policy: <link
  linkend="safe_numerics.exception_policies.trap_exception"><code>trap_exception</code></link>.</para>

  <para><programlisting><xi:include href="../../examples/example81.cpp"
        parse="text" xmlns:xi="http://www.w3.org/2001/XInclude"/></programlisting>Now,
  any expression which <emphasis><emphasis
  role="bold">might</emphasis></emphasis> fail at runtime is flagged with a
  compile time error. There is no longer any need for <code>try/catch
  blocks</code>. Since this program does not compile, the <emphasis
  role="bold">library absolutely <emphasis role="bold">guarantees that no
  arithmetic expression</emphasis> will yield incorrect results</emphasis> .
  This is our original goal. Now all we need to do is make the program work.
  There are a couple of ways to do this.</para>

  <section id="safe_numerics.eliminate_runtime_penalty.1">
    <title>Using Automatic Type Promotion</title>

    <para>The C++ standard describes how binary operations on different
    integer types are handled. Here is a simplified version of the
    rules:</para>

    <itemizedlist>
      <listitem>
        <para>promote any operand smaller than <code>int</code> to an
        <code>int</code> or <code>unsigned int</code>.</para>
      </listitem>

      <listitem>
        <para>if the signed operand is larger than the signed one, the result
        will be signed, otherwise the result will be unsigned.</para>
      </listitem>

      <listitem>
        <para>expand the smaller operand to the size of the larger one</para>
      </listitem>
    </itemizedlist>

    <para>So the result of the sum of two integer types may result in another
    integer type. If the values are large, the result can exceed the size that
    the resulting integer type can hold. This is what we call "overflow". The
    C/C++ standard characterizes this as undefined behavior and leaves to
    compiler implementors the decision as to how such a situation will be
    handled. Usually, this means just truncating the result to fit into the
    result type - which sometimes will make the result arithmetically
    incorrect. However, depending on the compiler and compile time switch
    settings, such cases may result in some sort of run time
    exception.</para>

    <para>The complete signature for a safe integer type is:</para>

    <para><programlisting>template &lt;
    class T,                  // underlying integer type
    class P = native,         // type promotion policy class
    class E = throw_exception // error handling policy class
&gt;
safe;
</programlisting></para>

    <para>The promotion rules implemented in the default <code><link
    linkend="safe_numerics.promotion_policy.models.native">native</link></code>
    type promotion policy are consistent with those of standard C++ </para>

    <para>Up until now, we've focused on detecting when this happens and
    invoking an exception or other kind of error handler.</para>

    <para>But now we look at another option. Using the <link
    linkend="safe_numerics.promotion_policy.models.automatic"><code>automatic</code></link>
    type promotion policy, we can change the rules of C++ arithmetic for safe
    types to something like the following:</para>

    <para><itemizedlist>
        <listitem>
          <para>for any C++ numeric type, we know from
          <code>std::numeric_limits</code> what the maximum and minimum values
          that a variable can be - this defines a closed interval.</para>
        </listitem>

        <listitem>
          <para>For any binary operation on these types, we can calculate the
          interval of the result at compile time.</para>
        </listitem>

        <listitem>
          <para>From this interval we can select a new type which can be
          guaranteed to hold the result and use this for the calculation. This
          is more or less equivalent to the following code:</para>

          <programlisting>int x, y;
int z = x + y               // could overflow

int x, y;
long z = (long)x + (long)y; // can never overflow</programlisting>

          <para>One could do this by editing his code manually, but such a
          task would be tedious, error prone, and leave the resulting code
          hard to read and verify. Using the <link
          linkend="safe_numerics.promotion_policy.models.automatic"><code>automatic</code></link>
          type promotion policy will achieve the equivalent result without
          these problems.</para>
        </listitem>

        <listitem>
          <para>Since the result type is guaranteed to hold the result, there
          is no need to check for errors - they can't happen!!! The usage of the
          <link
          linkend="safe_numerics.exception_policy.models.trap_exception"><code>trap_exception</code></link>
          exception policy enforces this guarantee.</para>
        </listitem>

        <listitem>
          <para>Since there can be no errors, there is no need for
          <code>try/catch</code> blocks.</para>
        </listitem>

        <listitem>
          <para>The only runtime error checking we need to do is when safe
          values are initialized or assigned from values which are "too
          large". These are infrequent occurrences which generally have little
          or no impact on program running time. And many times, one can make
          small adjustments in selecting the types in order to eliminate all
          runtime penalties.</para>
        </listitem>
      </itemizedlist></para>

    <para>In short, given a binary operation, we silently promote the types of
    the operands to a wider result type so the result cannot overflow. This is
    a fundamental departure from the C++ Standard behavior.</para>

    <para>If the interval of the result cannot be guaranteed to fit in the
    largest type that the machine can handle (usually 64 bits these days), the
    largest available integer type with the correct result sign is used. So
    even with our "automatic" type promotion scheme, it's still possible to
    overflow. In this case, and only this case, is runtime error checking code
    generated. Depending on the application, it should be rare to generate
    error checking code, and even more rare to actually invoke it. Any such
    instances are detected at compile time by the <link
    linkend="safe_numerics.exception_policies.trap_exception"><code>trap_exception</code></link>
    exception policy.</para>

    <para>This small example illustrates how to use automatic type promotion
    to eliminate all runtime penalty.</para>

    <para><programlisting><xi:include href="../../examples/example82.cpp"
          parse="text" xmlns:xi="http://www.w3.org/2001/XInclude"/></programlisting></para>

    <para>The above program produces the following output:</para>

    <para><screen>example 82:
x = &lt;int&gt;[-2147483648,2147483647] = 2147483647
y = &lt;int&gt;[-2147483648,2147483647] = 2
z = &lt;long&gt;[-4294967296,4294967294] = 2147483649
</screen></para>

    <para>The output uses a custom output manipulator for safe types to
    display the underlying type and its range as well as current value. Note
    that:<itemizedlist>
        <listitem>
          <para>the <link
          linkend="safe_numerics.promotion_policy.models.automatic"><code>automatic</code></link>
          type promotion policy has rendered the result of the sum of two
          <code>integers</code> as a <code>long</code> type.</para>
        </listitem>

        <listitem>
          <para>our program compiles without error - even when using the <link
          linkend="safe_numerics.exception_policies.trap_exception"><code>trap_exception</code></link>
          exception policy</para>
        </listitem>

        <listitem>
          <para>We do not need to use the <code>try/catch</code> idiom to handle
          arithmetic errors - we will have none.</para>
        </listitem>

        <listitem>
          <para>We only needed to change two lines of code to achieve our
          goal</para>
        </listitem>
      </itemizedlist></para>
  </section>

  <section id="safe_numerics.eliminate_runtime_penalty.2">
    <title>Using <link
    linkend="safe_numerics.safe_range">safe_range</link></title>

    <para>Instead of relying on automatic type promotion, we can just create
    our own types in such a way that we know they won't overflow. In the
    example below, we presume we know that the values we want to work with
    fall in the range [-24,82]. So we "know" the program will always result in
    a correct result. But since we trust no one, and since the program could
    change and the expressions be replaced with other ones, we'll still use
    the <link
    linkend="safe_numerics.exception_policies.trap_exception"><code>trap_exception</code></link>
    exception policy to verify at compile time that what we "know" to be true
    is in fact true.</para>

    <programlisting><xi:include href="../../examples/example83.cpp"
        parse="text" xmlns:xi="http://www.w3.org/2001/XInclude"/></programlisting>

    <para><itemizedlist>
        <listitem>
          <para><code><code>safe_signed_range</code></code> defines a type
          which is limited to the indicated range. Out of range assignments
          will be detected at compile time if possible (as in this case) or at
          run time if necessary.</para>
        </listitem>

        <listitem>
          <para><code>safe_signed_literal</code> defines a constant with a
          specific value. Defining constants in this way enables the library
          to correctly anticipate the range of the results of arithmetic
          expressions.</para>
        </listitem>

        <listitem>
          <para>The usage of <code>trap_exception</code> will mean that any
          assignment to z which could be outside the legal range will result
          in a compile time error.</para>
        </listitem>

        <listitem>
          <para>So if this program compiles, it's guaranteed to return a valid
          result.</para>
        </listitem>
      </itemizedlist>This program produces the following run time
    output.</para>

    <screen>example 83:
x = &lt;signed char&gt;[10,10] = 10
y = &lt;signed char&gt;[67,67] = 67
z = &lt;signed char&gt;[-24,82] = 77
</screen>
  </section>

  <section id="safe_numerics.eliminate_runtime_penalty.3">
    <title>Mixing Approaches</title>

    <para>For purposes of exposition, we've divided the discussion of how to
    eliminate runtime penalties by the different approaches available. A
    realistic program would likely include all techniques mentioned above.
    Consider the following:</para>

    <programlisting><xi:include href="../../examples/example84.cpp"
        parse="text" xmlns:xi="http://www.w3.org/2001/XInclude"/></programlisting>

    <para><itemizedlist>
        <listitem>
          <para>As before, we define a type <code>safe_t</code> to reflect our
          view of legal values for this program. This uses the <link
          linkend="safe_numerics.promotion_policy.models.automatic"><code>automatic</code></link>
          type promotion policy as well as the <link
          linkend="safe_numerics.exception_policies.trap_exception"><code>trap_exception</code></link>
          exception policy to enforce elimination of runtime penalties.</para>
        </listitem>

        <listitem>
          <para>The function <code>f</code> accepts only arguments of type
          <code>safe_t</code> so there is no need to check the input values.
          This performs the functionality of <emphasis><emphasis
          role="bold">programming by contract</emphasis></emphasis> with no
          runtime cost.</para>
        </listitem>

        <listitem>
          <para>In addition, we define <code>input_safe_t</code> to be used
          when reading variables from the program console. Clearly, these can
          only be checked at runtime so they use the throw_exception policy.
          When variables are read from the console they are checked for legal
          values. We need no ad hoc code to do this, as these types are
          guaranteed to contain legal values and will throw an exception when
          this guarantee is violated. In other words, we automatically get
          checking of input variables with no additional programming.</para>
        </listitem>

        <listitem>
          <para>On calling of the function <code>f</code>, arguments of type
          <code>input_safe_t</code> are converted to values of type
          <code>safe_t</code> . In this particular example, it can be
          determined at compile time that construction of an instance of a
          <code>safe_t</code> from an <code>input_safe_t</code> can never
          fail. Hence, no <code>try/catch</code> block is necessary. The usage
          of the <code>trap_exception</code> policy for <code>safe_t</code>
          types guarantees this to be true at compile time.</para>
        </listitem>
      </itemizedlist>Here is the output from the program when values 12 and 32
    are input from the console:</para>

    <screen>example 84:
12 32
x&lt;signed char&gt;[-24,82] = 12
y&lt;signed char&gt;[-24,82] = 32
z = &lt;short&gt;[-48,164] = 44
(x + y) = &lt;short&gt;[-48,164] = 44
(x - y) = &lt;short&gt;[-106,106] = -20
&lt;short&gt;[-48,164] = 44</screen>
  </section>
</section>
