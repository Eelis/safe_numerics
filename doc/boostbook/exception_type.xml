<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section PUBLIC "-//Boost//DTD BoostBook XML V1.1//EN"
"http://www.boost.org/tools/boostbook/dtd/boostbook.dtd">
<section id="safe_numerics.exception_type">
  <title>exception_type</title>

  <?dbhtml stop-chunking?>

  <section>
    <title>Description</title>

    <para>This <code>enum</code> holds the information regarding a failed
    operation.</para>
  </section>

  <section>
    <title>Notation</title>

    <informaltable>
      <tgroup cols="2">
        <colspec align="left"/>

        <colspec align="left" colwidth="4*"/>

        <thead>
          <row>
            <entry align="left">Symbol</entry>

            <entry align="left">Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><code>EP</code></entry>

            <entry><link
            linkend="safe_numerics.exception_policy">ExceptionPolicy</link>
            type</entry>
          </row>

          <row>
            <entry><code>e</code></entry>

            <entry><code>enum</code> class exception_type value</entry>
          </row>

          <row>
            <entry><code>msg</code></entry>

            <entry><code>const char</code> * - pointer to static string with
            error message</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
  </section>

  <section>
    <title>Valid Expressions</title>

    <para><informaltable>
        <tgroup cols="2">
          <colspec align="left" colwidth="2*"/>

          <colspec align="left" colwidth="3*"/>

          <thead>
            <row>
              <entry align="left">Expression</entry>

              <entry>Semantics</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code><simplelist>
                  <member>exception_type::no_exception</member>

                  <member>exception_type::everflow_error</member>

                  <member>exception_type::underflow_error</member>

                  <member>exception_type::range_error</member>

                  <member>exception_type::domain_error</member>

                  <member>exception_type::uninitialized</member>
                </simplelist></code></entry>

              <entry>enum values which describe various type of error
              conditions</entry>
            </row>

            <row>
              <entry><code>dispatch&lt;EP&gt;(e, msg);</code></entry>

              <entry>invoke the exception handling policy for a particular
              exception_type</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable></para>
  </section>

  <section>
    <title>dispatch&lt;EP&gt;(const exception_type &amp; e, const char *
    msg)</title>

    <para>This function is used to invoke the exception handling policy for a
    particular exception_type.</para>

    <section>
      <title>Synopsis</title>

      <para><programlisting>template&lt;class EP&gt;
constexpr void
dispatch&lt;EP&gt;(const exception_type &amp; e, const char * msg);</programlisting></para>
    </section>

    <section>
      <title>Example of use</title>

      <programlisting>#include "exception_policy.hpp"

dispatch&lt;boost::numeric::throw_exception&gt;(overflow_error, "operation resulted in overflow");</programlisting>
    </section>
  </section>

  <section>
    <title>See Also</title>

    <para><link
    linkend="safe_numerics.exception_policy">ExceptionPolicy</link></para>
  </section>
</section>
