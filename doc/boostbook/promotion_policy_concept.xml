<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section PUBLIC "-//Boost//DTD BoostBook XML V1.1//EN"
"http://www.boost.org/tools/boostbook/dtd/boostbook.dtd">
<section id="safe_numerics.promotion_policy">
  <title id="safe_numerics.promotion_policy">PromotionPolicy&lt;PP&gt;</title>

  <section>
    <title>Description</title>

    <para>In C++, arithmetic operations result in types which may or may not
    be the same as the constituent types. A promotion policy determines the
    type of the result of an arithmetic operation. For example, in the
    following code<programlisting>int x;
char y;
auto z = x + y</programlisting>the type of <code>z</code> will be an
    <code>int</code>. This is a consequence for the standard rules for type
    promotion for C/C++ arithmetic. A key feature of library permits one to
    specify his own type promotion rules via a PromotionPolicy class.</para>
  </section>

  <section>
    <title>Notation</title>

    <informaltable>
      <tgroup cols="2" colsep="1" rowsep="1">
        <colspec align="left"/>

        <colspec align="left" colwidth="3*"/>

        <tbody>
          <row>
            <entry><code>PP</code></entry>

            <entry>A type that full fills the requirements of a
            PromotionPollicy</entry>
          </row>

          <row>
            <entry><code>T, U, V</code></entry>

            <entry>A type that is a model of the Numeric concept</entry>
          </row>

          <row>
            <entry><code>t, u, v</code></entry>

            <entry>An object of type modeling Numeric</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
  </section>

  <section>
    <title>Associated Types</title>

    <informaltable>
      <tgroup cols="2">
        <colspec align="left"/>

        <colspec align="left" colwidth="3*"/>

        <tbody>
          <row>
            <entry><code>EP</code></entry>

            <entry>A type that full fills the requirements of an <link
            linkend="safe_numerics.exception_policy">ExceptionPollicy</link></entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
  </section>

  <section>
    <title>Valid Expressions</title>

    <para>Any operations which result in integers which cannot be represented
    as some Numeric type will throw an exception.<informaltable>
        <tgroup cols="2">
          <colspec align="left"/>

          <colspec align="left"/>

          <thead>
            <row>
              <entry align="left">Expression</entry>

              <entry>Return Value</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>PP::addition_result&lt;T, U, PP,
              EP&gt;::type</code></entry>

              <entry>unspecified Numeric type</entry>
            </row>

            <row>
              <entry><code>PP::subtraction_result&lt;T, U, PP,
              EP&gt;::type</code></entry>

              <entry>unspecified Numeric type</entry>
            </row>

            <row>
              <entry><code>PP::multiplication_result&lt;T, U, PP,
              EP&gt;::type</code></entry>

              <entry>unspecified Numeric type</entry>
            </row>

            <row>
              <entry><code>PP::division_result&lt;T, U, PP,
              EP&gt;::type</code></entry>

              <entry>unspecified Numeric type</entry>
            </row>

            <row>
              <entry><code>PP::modulus_result&lt;T, U, PP,
              EP&gt;::type</code></entry>

              <entry>unspecified Numeric type</entry>
            </row>

            <row>
              <entry><code>PP::left_shift_result&lt;T, U, PP,
              EP&gt;::type</code></entry>

              <entry>unspecified Numeric type</entry>
            </row>

            <row>
              <entry><code>PP::right_shift_result&lt;T, U, PP,
              EP&gt;::type</code></entry>

              <entry>unspecified Numeric type</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable></para>
  </section>

  <section>
    <title>Header</title>

    <para><ulink
    url="../../include/concept/promotion_policy.hpp"><code>#include
    &lt;safe_numerics/include/concepts/promotion_policy.hpp&gt;
    </code></ulink></para>
  </section>

  <section>
    <title>Models</title>

    <para>The library contains a number of pre-made promotion policies:</para>

    <itemizedlist>
      <listitem id="safe_numerics.promotion_policy.models.native">
        <para><code>boost::numeric::native</code></para>

        <para>Use the normal C/C++ expression type promotion rules.
        <programlisting name="cpp">int x;
char y;
auto z = x + y; // could result in overflow
safe&lt;int&gt; sx;
auto sz = sx + y; // includes code which traps overflows at runtime</programlisting></para>

        <para>The type of sz will be safe&lt; type of z &gt;.</para>

        <para>This policy is documented in <link
        linkend="safe_numerics.native_policy">Promotion Policies -
        native</link>.</para>
      </listitem>

      <listitem id="safe_numerics.promotion_policy.models.automatic">
        <para><code>boost::numeric::automatic</code></para>

        <para>Use optimizing expression type promotion rules. These rules
        replace the normal C/C++ type promotion rules with other rules which
        are designed to result in more efficient computations. Expression
        types are promoted to the smallest type which can be guaranteed to
        hold the result without overflow. If there is no such type, the result
        will be checked for overflow. Consider the following
        example:<programlisting>int x;
char y;
auto z = x + y; // could result in overflow
safe&lt;int&gt; sx;
auto sz = sx + y; // promotes expression type to a safe&lt;long int&gt; which requires no result checking
is guaranteed not to overflow.

safe_unsigned_range&lt;1, 4&gt; a;
safe_unsigned_range&lt;2, 4&gt; b;
auto c = a + b; // c will be of type safe_unsigned_range&lt;3, 8&gt; and cannot overflow</programlisting></para>

        <para>Type sz will be a <link
        linkend="safe_numerics.safe_numeric_concept">SafeNumeric</link> type
        which is guaranteed to hold he result of x + y. In this case that will
        be a long int (or perhaps a long ong) depending upon the compiler and
        machine architecture. In this case, there will be no need for any
        special checking on the result and there can be no overflow.</para>

        <para>Type of c will be a signed caracter as that type can be
        guarenteed to hold the sum so no overflow checking is done.</para>

        <para>This policy is documented in <link
        linkend="safe_numerics.automatic_policy">Promotion Policies -
        automatic</link></para>
      </listitem>
    </itemizedlist>
  </section>
</section>
