<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE library PUBLIC "-//Boost//DTD BoostBook XML V1.1//EN"
"http://www.boost.org/tools/boostbook/dtd/boostbook.dtd">
<library dirname="safe_numerics" id="safe_numerics" last-revision="$Date"
         name="Safe Numerics">
  <title>Safe Numerics</title>

  <libraryinfo last-revision="January 29, 2015">
    <author>
      <firstname>Robert</firstname>

      <surname>Ramey</surname>
    </author>

    <copyright>
      <year>2012</year>

      <holder>Robert Ramey</holder>
    </copyright>

    <legalnotice>
      <para><ulink url="http://www.boost.org/LICENSE_1_0.txt">Subject to Boost
      Software License</ulink></para>
    </legalnotice>

    <librarypurpose>Safe integer operations</librarypurpose>

    <librarycategory>Numerics</librarycategory>
  </libraryinfo>

  <xi:include href="safe_introduction.xml" xpointer="element(/1)"
              xmlns:xi="http://www.w3.org/2001/XInclude"/>

  <xi:include href="tutorial.xml" xpointer="element(/1)"
              xmlns:xi="http://www.w3.org/2001/XInclude"/>

  <xi:include href="eliminate_runtime_penalty.xml" xpointer="element(/1)"
              xmlns:xi="http://www.w3.org/2001/XInclude"/>

  <xi:include href="notes.xml" xpointer="element(/1)"
              xmlns:xi="http://www.w3.org/2001/XInclude"/>

  <section id="safe_numerics.concepts">
    <title>Type Requirements</title>

    <xi:include href="numeric_concept.xml" xpointer="element(/1)"
                xmlns:xi="http://www.w3.org/2001/XInclude"/>

    <xi:include href="integer_concept.xml" xpointer="element(/1)"
                xmlns:xi="http://www.w3.org/2001/XInclude"/>

    <xi:include href="safe_numeric_concept.xml" xpointer="element(/1)"
                xmlns:xi="http://www.w3.org/2001/XInclude"/>

    <xi:include href="promotion_policy_concept.xml" xpointer="element(/1)"
                xmlns:xi="http://www.w3.org/2001/XInclude"/>

    <xi:include href="exception_policy_concept.xml" xpointer="element(/1)"
                xmlns:xi="http://www.w3.org/2001/XInclude"/>
  </section>

  <section id="safe_numerics.types">
    <title>Types</title>

    <xi:include href="safe.xml" xpointer="element(/1)"
                xmlns:xi="http://www.w3.org/2001/XInclude"/>

    <xi:include href="safe_range.xml" xpointer="element(/1)"
                xmlns:xi="http://www.w3.org/2001/XInclude"/>

    <xi:include href="safe_literal.xml" xpointer="element(/1)"
                xmlns:xi="http://www.w3.org/2001/XInclude"/>

    <section id="safe_numerics.promotion_policies">
      <title>Promotion Policies</title>

      <xi:include href="native.xml" xpointer="element(/1)"
                  xmlns:xi="http://www.w3.org/2001/XInclude"/>

      <xi:include href="automatic.xml" xpointer="element(/1)"
                  xmlns:xi="http://www.w3.org/2001/XInclude"/>

      <xi:include href="cpp.xml" xpointer="element(/1)"
                  xmlns:xi="http://www.w3.org/2001/XInclude"/>
    </section>

    <section id="safe_numerics.exception_policies">
      <title>Exception Policies</title>

      <xi:include href="throw_exception.xml" xpointer="element(/1)"
                  xmlns:xi="http://www.w3.org/2001/XInclude"/>

      <xi:include href="trap_exception.xml" xpointer="element(/1)"
                  xmlns:xi="http://www.w3.org/2001/XInclude"/>

      <xi:include href="ignore_exception.xml" xpointer="element(/1)"
                  xmlns:xi="http://www.w3.org/2001/XInclude"/>

      <xi:include href="no_exception_support.xml" xpointer="element(/1)"
                  xmlns:xi="http://www.w3.org/2001/XInclude"/>
    </section>
  </section>

  <section id="safe_numerics.exception_safety">
    <title>Exception Safety</title>

    <para>All operations in this library are exception safe and meet the
    strong guarantee.</para>
  </section>

  <section id="safe_numerics.library_implementation">
    <title>Library Implementation</title>

    <para>This library should compile and run correctly on any conforming
    C++14 compiler.</para>

    <para>The Safe Numerics library is implemented in terms of some more
    fundamental software components described here. It is not necessary to
    know about these components to use the library. This information has been
    included to help those who want to understand how the library works so
    they can extend it, correct bugs in it, or understand its limitations.
    These components are also interesting in their own right. For all these
    reasons, they are documented here. In general terms, the library works in
    the following manner:</para>

    <itemizedlist>
      <listitem>
        <para>All unary/binary expressions where one of the operands is a
        "safe" type are overloaded. These overloads are declared and defined
        in the header file "safe_integer.hpp". SFINAE - "Substitution Failure
        Is Not An Error" and <code>std::enable_if</code> are key features of
        C++ used to define these overloads in a correct manner.</para>
      </listitem>

      <listitem>
        <para>Each overloaded operation implements the following:<itemizedlist>
            <listitem>
              <para>Retrieve range of values for each operand of type T from
              <code>std::numeric_limits&lt;T&gt;::min()</code> and
              <code>std::numeric_limits&lt;T&gt;::max()</code>.</para>
            </listitem>

            <listitem>
              <para>Given the ranges of the operands, determine the range of
              the result of the operation using interval arithmetic. This is
              implemented in the "interval.hpp" header file using the <code>constexpr</code>
              facility of C++14.</para>
            </listitem>

            <listitem>
              <para>If the range of the result type includes the range of the
              result of the operation, no run time checking of the result is
              necessary. So the operation reduces to the original built-in
              C/C++ operation.</para>
            </listitem>

            <listitem>
              <para>Otherwise, the operation is implemented as a "checked
              integer operation" at run time. This operation returns a variant
              which will contain either a correct result or an exception enum
              indicating why a correct result could not be obtained. The
              variant object is implemented in the header file
              "checked_result.hpp" and the checked operations are implemented
              in "checked.hpp".</para>
            </listitem>

            <listitem>
              <para>If a valid result has been obtained, it is passed to the
              caller.</para>
            </listitem>

            <listitem>
              <para>Otherwise, an exception is invoked.</para>
            </listitem>
          </itemizedlist></para>
      </listitem>
    </itemizedlist>

    <xi:include href="interval.xml" xpointer="element(/1)"
                xmlns:xi="http://www.w3.org/2001/XInclude"/>

    <xi:include href="checked_result.xml" xpointer="element(/1)"
                xmlns:xi="http://www.w3.org/2001/XInclude"/>

    <xi:include href="exception_type.xml" xpointer="element(/1)"
                xmlns:xi="http://www.w3.org/2001/XInclude"/>

    <xi:include href="checked.xml" xpointer="element(/1)"
                xmlns:xi="http://www.w3.org/2001/XInclude"/>
  </section>

  <section id="safe_numerics.performance_tests">
    <title>Performance Tests</title>

    <para>Our goal is to create facilities which make it possible to write programs
    known to be correct. But we also want programmers to actually use the
    facilities we provide here. This won't happen if using these facilities
    impacts performance to a significant degree. Although we've taken
    precautions to avoid doing this, the only real way to know is to create
    and run some tests.</para>

    <para>To Do</para>
  </section>

  <xi:include href="faq.xml" xpointer="element(/1)"
              xmlns:xi="http://www.w3.org/2001/XInclude"/>

  <section id="safe_numerics.pending_issues">
    <title>Pending Issues</title>

    <para>The library is under development. There are a number of issues still
    pending.</para>

    <itemizedlist>
      <listitem>
        <para>The library is currently limited to integers.</para>
      </listitem>

      <listitem>
        <para>Conversions to safe integer types from floating point types is
        not explicitly addressed.</para>
      </listitem>

      <listitem>
        <para>Note that standard library stream conversion functions such as
        <code>strtoi</code> etc. DO check for valid input and throw the
        exception <code>std::out_of_range</code> if the string cannot be
        converted to the specified integer type. In other words,
        <code>strtoi</code> already contains some of the functionality that
        <code>safe&lt;int&gt;</code> provides.</para>
      </listitem>

      <listitem>
        <para>Although care has been taken to make the library portable, it's
        likely that at least some parts of the implementation - particularly
        <code>checked</code> arithmetic - depend upon two's complement
        representation of integers. Hence the library is probably not
        currently portable to all other possible C++ architectures.</para>
      </listitem>

      <listitem>
        <para>Currently the library permits a safe&lt;int&gt; value to be
        uninitialized. This supports the goal of "drop-in" replacement of
        C++/C built-in types with safe counter parts. On the other hand, this
        breaks the "always valid" guarantee.</para>
      </listitem>
    </itemizedlist>
  </section>

  <xi:include href="acknowledgements.xml" xpointer="element(/1)"
              xmlns:xi="http://www.w3.org/2001/XInclude"/>

  <section id="safe_numerics.change_log">
    <title>Change Log</title>

    <para>This is the third version.</para>
  </section>

  <xi:include href="bibliography.xml" xpointer="element(/1)"
              xmlns:xi="http://www.w3.org/2001/XInclude"/>
</library>
