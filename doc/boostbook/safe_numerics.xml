<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE library PUBLIC "-//Boost//DTD BoostBook XML V1.1//EN"
"http://www.boost.org/tools/boostbook/dtd/boostbook.dtd">
<library dirname="safe_numerics" id="safe_numerics" last-revision="$Date"
         name="Safe Numerics">
  <title>Safe Numerics</title>

  <libraryinfo last-revision="January 29, 2015">
    <author>
      <firstname>Robert</firstname>

      <surname>Ramey</surname>
    </author>

    <copyright>
      <year>2012</year>

      <holder>Robert Ramey</holder>
    </copyright>

    <legalnotice>
      <para><ulink url="http://www.boost.org/LICENSE_1_0.txt">Subject to Boost
      Software License</ulink></para>
    </legalnotice>

    <librarypurpose>Safe integer operations</librarypurpose>

    <librarycategory>Numerics</librarycategory>
  </libraryinfo>

  <xi:include href="safe_introduction.xml" xpointer="element(/1)"
              xmlns:xi="http://www.w3.org/2001/XInclude"/>

  <xi:include href="tutorial.xml" xpointer="element(/1)"
              xmlns:xi="http://www.w3.org/2001/XInclude"/>

  <xi:include href="eliminate_runtime_penalty.xml" xpointer="element(/1)"
              xmlns:xi="http://www.w3.org/2001/XInclude"/>

  <xi:include href="notes.xml" xpointer="element(/1)"
              xmlns:xi="http://www.w3.org/2001/XInclude"/>

  <section id="safe_numerics.concepts">
    <title>Type Requirements</title>

    <xi:include href="numeric_concept.xml" xpointer="element(/1)"
                xmlns:xi="http://www.w3.org/2001/XInclude"/>

    <xi:include href="integer_concept.xml" xpointer="element(/1)"
                xmlns:xi="http://www.w3.org/2001/XInclude"/>

    <xi:include href="safe_numeric_concept.xml" xpointer="element(/1)"
                xmlns:xi="http://www.w3.org/2001/XInclude"/>

    <xi:include href="promotion_policy_concept.xml" xpointer="element(/1)"
                xmlns:xi="http://www.w3.org/2001/XInclude"/>

    <xi:include href="exception_policy_concept.xml" xpointer="element(/1)"
                xmlns:xi="http://www.w3.org/2001/XInclude"/>
  </section>

  <section id="safe_numerics.types">
    <title>Types</title>

    <xi:include href="safe.xml" xpointer="element(/1)"
                xmlns:xi="http://www.w3.org/2001/XInclude"/>

    <xi:include href="safe_range.xml" xpointer="element(/1)"
                xmlns:xi="http://www.w3.org/2001/XInclude"/>

    <xi:include href="safe_literal.xml" xpointer="element(/1)"
                xmlns:xi="http://www.w3.org/2001/XInclude"/>

    <section id="safe_numerics.promotion_policies">
      <title>Promotion Policies</title>

      <xi:include href="native.xml" xpointer="element(/1)"
                  xmlns:xi="http://www.w3.org/2001/XInclude"/>

      <xi:include href="automatic.xml" xpointer="element(/1)"
                  xmlns:xi="http://www.w3.org/2001/XInclude"/>

      <xi:include href="cpp.xml" xpointer="element(/1)"
                  xmlns:xi="http://www.w3.org/2001/XInclude"/>
    </section>

    <section id="safe_numerics.exception_policies">
      <title>Exception Policies</title>

      <xi:include href="throw_exception.xml" xpointer="element(/1)"
                  xmlns:xi="http://www.w3.org/2001/XInclude"/>

      <xi:include href="trap_exception.xml" xpointer="element(/1)"
                  xmlns:xi="http://www.w3.org/2001/XInclude"/>

      <xi:include href="ignore_exception.xml" xpointer="element(/1)"
                  xmlns:xi="http://www.w3.org/2001/XInclude"/>

      <xi:include href="no_exception_support.xml" xpointer="element(/1)"
                  xmlns:xi="http://www.w3.org/2001/XInclude"/>
    </section>
  </section>

  <section id="safe_numerics.exception_safety">
    <title>Exception Safety</title>

    <para>All operations in this library are exception safe and meet the
    strong guarantee.</para>
  </section>

  <section id="safe_numerics.library_implementation">
    <title>Library Implementation</title>

    <para>This library should compile and run correctly on any conforming
    C++14 compiler.</para>

    <para>The Safe Numerics library is implemented in terms of some more
    fundamental software components described here. It is not necessary to
    know about these components to use the library. The information has been
    included to help those who want to understand how the library works so
    they can extend it, correct bugs in it, or understand it's limitations.
    These components are also interesting in their own right. For all these
    reasons, they are documented here.</para>

    <xi:include href="exception_type.xml" xpointer="element(/1)"
                xmlns:xi="http://www.w3.org/2001/XInclude"/>

    <xi:include href="checked_result.xml" xpointer="element(/1)"
                xmlns:xi="http://www.w3.org/2001/XInclude"/>

    <xi:include href="checked.xml" xpointer="element(/1)"
                xmlns:xi="http://www.w3.org/2001/XInclude"/>

    <xi:include href="interval.xml" xpointer="element(/1)"
                xmlns:xi="http://www.w3.org/2001/XInclude"/>
  </section>

  <section id="safe_numerics.performance_tests">
    <title>Performance Tests</title>

    <para>Our goal creating facilities which make it possible write programs
    known to be correct. But we also want programmers to actually use the
    facilities we provide here. This won't happen if using these facilities
    impacts performance to a significant degree. Although we've take
    precautions to avoid doing this, the only real way to know is to create
    and run some tests.</para>

    <para>To Do</para>
  </section>

  <xi:include href="faq.xml" xpointer="element(/1)"
              xmlns:xi="http://www.w3.org/2001/XInclude"/>

  <section id="safe_numerics.pending_issues">
    <title>Pending Issues</title>

    <para>The library is under development. There are a number of issues still
    pending.</para>

    <itemizedlist>
      <listitem>
        <para>The library is currently limited to integers.</para>
      </listitem>

      <listitem>
        <para>Conversions to safe integer types from floating point types is
        not explicitly addressed.</para>
      </listitem>

      <listitem>
        <para>Note that standard library stream conversion functions such as
        <code>strtoi</code> etc. DO check for valid input and throw the
        exception <code>std::out_of_range</code> if the string cannot be
        converted to the specified integer type. In other words,
        <code>strtoi</code> already contains some of the functionality that
        <code>safe&lt;int&gt;</code> provides.</para>
      </listitem>

      <listitem>
        <para>Although care was taking to make the library portable, it's
        likely that at least some parts of the implementation - particularly
        <code>checked</code> arithmetic - depend upon two's complement
        representation of integers. Hence the library is probably not
        currently portable to all other possible C++ architectures.</para>
      </listitem>

      <listitem>
        <para>Currently the library permits a safe&lt;int&gt; value to be
        uninitialized. This supports the goal of "drop-in" replacement of
        C++/C built-in types with safe counter parts. On the other hand, this
        breaks the "always valid" guarantee.</para>
      </listitem>
    </itemizedlist>
  </section>

  <section>
    <title>Acknowledgements</title>

    <para>This library would never have been created without inspiration,
    collaboration and constructive criticism from multiple sources. </para>

    <para><glosslist>
        <glossentry>
          <glossterm>David LaBlanc</glossterm>

          <glossdef>
            <para>This library is inspired by <ulink
            url="http://safeint.codeplex.com">David LeBlanc's SafeInt
            Library</ulink> . I found this library very well done in every way
            and useful in my embedded systems work. This motivated me to take
            to the "next level".</para>
          </glossdef>
        </glossentry>

        <glossentry>
          <glossterm><ulink url="https://akrzemi1.wordpress.com">Andrzej
          Krzemie≈Ñski</ulink></glossterm>

          <glossdef>
            <para>Andrzej Commented and reviewed the library as it was
            originally posted on the <ulink url="www.blincubator.com">Boost
            Library Incubator</ulink>. The the consequent back and forth
            motivated me to invest more effort in developing documentation and
            examples to justify the utility, indeed the necessity, for this
            library. He also noted many errors in code, documentation, and
            tests. Without his interested and effort, I do not believe the
            library would have progressed beyond it's initial stages.</para>
          </glossdef>
        </glossentry>

        <glossentry>
          <glossterm><ulink url="www.boost.org">Boost</ulink></glossterm>

          <glossdef>
            <para>As always, the Boost Developer's mailing list has been the
            source of many useful observations from potential users and
            constructive criticism from very knowledgeable developers. Boost
            also supplies a widely accepted list of standards and requirements
            for quality software. Finally, the Boost infrastructure for
            testing, documentation is close to indispensable.</para>
          </glossdef>
        </glossentry>
      </glosslist></para>
  </section>

  <section id="safe_numerics.change_log">
    <title>Change Log</title>

    <para>This is the third version.</para>
  </section>

  <xi:include href="bibliography.xml" xpointer="element(/1)"
              xmlns:xi="http://www.w3.org/2001/XInclude"/>
</library>
