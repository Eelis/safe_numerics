<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section PUBLIC "-//Boost//DTD BoostBook XML V1.1//EN"
"http://www.boost.org/tools/boostbook/dtd/boostbook.dtd">
<section>
  <title>interval&lt;typename R&gt;</title>

  <section>
    <title>Description</title>

    <para>A closed arithmetic interval represented by a pair of elements of
    type R.</para>
  </section>

  <section>
    <title>Template Parameters</title>

    <para>R must model the type requirements <link
    linkend="safe_numerics.numeric">Numeric</link></para>
  </section>

  <section>
    <title>Notation</title>

    <para>[The next two sections, associated types and valid expressions,
    present expressions involving types that model the concept being defined.
    This section defines the meaning of the variables and identifiers used in
    those expressions.]</para>

    <informaltable>
      <tgroup cols="2">
        <colspec align="left"/>

        <colspec align="left" colwidth="4*"/>

        <thead>
          <row>
            <entry align="left">Symbol</entry>

            <entry align="left">Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><code>I</code></entry>

            <entry>An interval type</entry>
          </row>

          <row>
            <entry><code>i,t, v</code></entry>

            <entry>An interval</entry>
          </row>

          <row>
            <entry><code>R, T</code></entry>

            <entry>Numeric types which can be used to make an interval</entry>
          </row>

          <row>
            <entry><code>l, u</code></entry>

            <entry>lower and upper Numeric limits of an interval</entry>
          </row>

          <row>
            <entry><code>C</code></entry>

            <entry>checked_result&lt;R&gt;</entry>
          </row>

          <row>
            <entry><code>os</code></entry>

            <entry>std::basic_ostream&lt;Char, CharT&gt;</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
  </section>

  <section>
    <title>Valid Expressions</title>

    <para>Note that all expressions are constexpr .</para>

    <para><informaltable>
        <tgroup cols="3">
          <colspec align="left" colwidth="2*"/>

          <colspec align="left" colwidth="1*"/>

          <colspec align="left" colwidth="4*"/>

          <thead>
            <row>
              <entry align="left">Expression</entry>

              <entry>Return Type</entry>

              <entry>Semantics</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>interval&lt;R&gt;(l, u)</code></entry>

              <entry><code>interval&lt;R&gt;</code></entry>

              <entry>construct a new interval from a pair of limits</entry>
            </row>

            <row>
              <entry><code>interval&lt;R&gt;(p)</code></entry>

              <entry><code>interval&lt;R&gt;</code></entry>

              <entry>construct a new interval from a pair of limits</entry>
            </row>

            <row>
              <entry><code>interval&lt;R&gt;(i)</code></entry>

              <entry><code>interval&lt;R&gt;</code></entry>

              <entry>copy constructor</entry>
            </row>

            <row>
              <entry><code>i.includes(t)</code></entry>

              <entry><code>bool</code></entry>

              <entry>return true if interval i includes interval t</entry>
            </row>

            <row>
              <entry><code>add&lt;R&gt;(t, v)</code></entry>

              <entry><code>C</code></entry>

              <entry>add two intervals and return the result</entry>
            </row>

            <row>
              <entry><code>subtract&lt;R&gt;(t, v)</code></entry>

              <entry><code>C</code></entry>

              <entry>subtract two intervals and return the result</entry>
            </row>

            <row>
              <entry><code>multiply&lt;R&gt;(t, v)</code></entry>

              <entry><code>C</code></entry>

              <entry>multiply two intervals and return the result</entry>
            </row>

            <row>
              <entry><code>divide_nz&lt;R&gt;(t, v)</code></entry>

              <entry><code>C</code></entry>

              <entry>divide one interval by another excluding the value zero
              and return the result</entry>
            </row>

            <row>
              <entry><code>divide&lt;R&gt;(t, v)</code></entry>

              <entry><code>C</code></entry>

              <entry>divide one interval by another and return the
              result</entry>
            </row>

            <row>
              <entry><code>modulus_nz&lt;R&gt;(t, v)</code></entry>

              <entry><code>C</code></entry>

              <entry>calculate modulus of one interval by another excluding
              the value zero and return the result</entry>
            </row>

            <row>
              <entry><code>modulus&lt;R&gt;(t, v)</code></entry>

              <entry><code>C</code></entry>

              <entry>calculate modulus of one interval by another and return
              the result</entry>
            </row>

            <row>
              <entry><code>left_shift&lt;R&gt;(t, v)</code></entry>

              <entry><code>C</code></entry>

              <entry>calculate modulus of one interval by another and return
              the result</entry>
            </row>

            <row>
              <entry><code>right_shift&lt;R&gt;(t, v)</code></entry>

              <entry><code>C</code></entry>

              <entry>calculate modulus of one interval by another and return
              the result</entry>
            </row>

            <row>
              <entry><code>t &lt; u</code></entry>

              <entry><code>boost::logic::tribool</code></entry>

              <entry>true if every element in t is less than every element in
              u</entry>
            </row>

            <row>
              <entry><code>t &gt; u</code></entry>

              <entry><code>boost::logic::tribool</code></entry>

              <entry>true if every element in t is greater than every element
              in u</entry>
            </row>

            <row>
              <entry><code>t == u</code></entry>

              <entry><code>bool</code></entry>

              <entry>true if limits are equal</entry>
            </row>

            <row>
              <entry><code>t != u</code></entry>

              <entry><code>bool</code></entry>

              <entry>true if limits are not equal</entry>
            </row>

            <row>
              <entry><code>t &lt;= u</code></entry>

              <entry><code>boost::logic::tribool</code></entry>

              <entry>true if every element in t is less than or equal to every
              element in u</entry>
            </row>

            <row>
              <entry><code>t &gt;= u</code></entry>

              <entry><code>boost::logic::tribool</code></entry>

              <entry>true if every element in t is greater than or equal to
              every element in u</entry>
            </row>

            <row>
              <entry><code>t &lt; u</code></entry>

              <entry><code>boost::logic::tribool</code></entry>

              <entry>calculate modulus of one interval by another and return
              the result</entry>
            </row>

            <row>
              <entry><code>os &lt;&lt; i</code></entry>

              <entry><code>os &amp;</code></entry>

              <entry>print interval to output stream</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable></para>
  </section>

  <section>
    <title>Header</title>

    <para><code>#include "interval.hpp"</code></para>
  </section>

  <section>
    <title>Example of use</title>

    <para>[A code fragment involving the type.]</para>

    <programlisting>#include &lt;vector&gt;

vector&lt;int&gt; V;
V.insert(V.begin(), 3);
assert(V.size() == 1 &amp;&amp; V.capacity() &gt;= 1 &amp;&amp; V[0] == 3);
</programlisting>
  </section>

  <section>
    <title>Notes</title>

    <para>[Footnotes (if any) that are referred to by other parts of the
    page.]</para>
  </section>

  <section>
    <title>See Also</title>

    <para>[links to any other related concepts or types]</para>

    <para/>
  </section>
</section>
